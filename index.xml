<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jacob Cons</title>
    <link>https://jacobcons.com/</link>
    <description>Recent content on Jacob Cons</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Nov 2024 12:10:22 +0000</lastBuildDate>
    <atom:link href="https://jacobcons.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Error Handling With Express.js and Typescript Made Easy</title>
      <link>https://jacobcons.com/blog/error-handling-with-express.js-and-typescript-made-easy/</link>
      <pubDate>Wed, 13 Nov 2024 12:10:22 +0000</pubDate>
      <guid>https://jacobcons.com/blog/error-handling-with-express.js-and-typescript-made-easy/</guid>
      <description>&lt;p&gt;A github repo is available with the completed code for the blog post &lt;a href=&#34;https://github.com/jacobcons/error-handling-blog-post-code&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h3&gt;&#xA;&lt;p&gt;The below dependencies are required (note that a workaround will be provided later in the post if you&amp;rsquo;re using express 4).&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;npm i express@5.01&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;npm i -D @types/express&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;dealing-with-errors-where-the-server-is-at-fault&#34;&gt;Dealing with errors where the server is at fault&lt;/h3&gt;&#xA;&lt;p&gt;For example sending an http request to a url that doesn&amp;rsquo;t exist, executing a malformed sql statement etc&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Technical decisions whilst making Emote</title>
      <link>https://jacobcons.com/blog/technical-decisions-whilst-making-emote/</link>
      <pubDate>Wed, 08 May 2024 14:45:18 +0100</pubDate>
      <guid>https://jacobcons.com/blog/technical-decisions-whilst-making-emote/</guid>
      <description>&lt;p&gt;I recently finished building the backend for &lt;a href=&#34;https://github.com/jacobcons/Emote&#34; target=&#34;_blank&#34;&gt;Emote&lt;/a&gt;, which is a social network site where you can&#xA;only post/comment using exclusively emojis. I fancied writing up some of my thoughts on the different decisions/tradeoffs I&#xA;made along the way.&lt;/p&gt;&#xA;&lt;h3 id=&#34;sql&#34;&gt;SQL&lt;/h3&gt;&#xA;&lt;p&gt;I used the query builder knex with most SQL just written raw with the occasional use of knex for dynamic queries when&#xA;building it out gets ugly. I prefer writing raw sql since you don&amp;rsquo;t have to learn the quirks and syntax of different ORMs&#xA;and can ensure you exactly know the sql being executed. This leads to a simpler mental model, and allows you to write&#xA;efficient queries making full use of all of your SQL dialect&amp;rsquo;s features. However, I can see how an ORMs ability to&#xA;fetch related data and neatly format it in the json could reduce a lot of boilerplate as I had to make use of PostgreSQL&amp;rsquo;s&#xA;JSON functions which can lead to some fairly complex queries. But, most of the time when you need to do anything&#xA;slightly complicated the ORM either generates inefficient SQL or it simply cant meet all your requirements and so you&#xA;have to do further processing on the data at the application level. Overall, I&amp;rsquo;m far more happy having to write a bit&#xA;more boilerplate if it gives me complete control over the SQL.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
